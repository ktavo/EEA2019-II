}
dataset_mejorcorte  = function(pdataset)
{
#creo una variable azar que me va a ser util
#inicializo el generador de numeros aleatorios
set.seed( ksemilla_azar2 )
pdataset[ , azar   := runif(nrow(pdataset)) ]
#busco el mejor corte del dataset
metricas <- lapply( colnames( pdataset) , columna_mejorcorte,  pdataset )
metricas <- rbindlist( metricas )
metricas <- metricas[ order( -gan_total ) ]
#me quedo con el primero SIN ser clase01 ni clase_ternaria
m <-  metricas[ columna!="clase01" & columna!="clase_ternaria",  ][1]
return(  list(  "columna"   = m$columna,
"valor"     = m$valor ,
"gan_left"  = m$gan_left ,
"gan_right" = m$gan_right,
"gan_na"    = m$gan_na,
"gan_total" = m$gan_total
)
)
}
dataset <- fread("201902.txt")
dataset[ , clase01:= as.integer(clase_ternaria=="BAJA+2") ]
set.seed(ksemilla_azar1 )
ksemilla_azar1   <-  77801
ksemilla_azar2   <-  567937
set.seed(ksemilla_azar1 )
dataset[, azar :=  runif( nrow(dataset) )]
setorder( dataset,  clase01,  azar )
neg_cant <-  nrow( dataset[ clase01==0 , ] )
pos_cant <-  nrow( dataset[ clase01==1 , ] )
dataset[  , particion:= 1 ]
dataset[  (round(neg_cant/2)+1): neg_cant ,  particion:= 2 ]
dataset[  (neg_cant+1):(neg_cant+1+ round(pos_cant/2)) ,  particion:= 2 ]
nrow( dataset[ particion==1, ] )
nrow( dataset[ particion==2, ] )
#-------------------------
dataset[ , nodo_arbol := "1" ]
#hago los conteos
dataset[ , list(  train_cant = sum(  particion==1 ),
test_cant  = sum(  particion==2 ),
train_pos  = sum(  particion==1 & clase01==1 ),
test_pos   = sum(  particion==2 & clase01==1 ),
train_neg  = sum(  particion==1 & clase01==0 ),
test_neg   = sum(  particion==2 & clase01==0 ),
train_gan  = sum(  ifelse( particion==1, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE),
test_gan   = sum(  ifelse( particion==2, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE)
)
, by="nodo_arbol" ]
#-------------------------
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="1",]  )
ksemilla_azar1   <-  7777801
ksemilla_azar2   <-  56799937
set.seed(ksemilla_azar1 )
dataset[, azar :=  runif( nrow(dataset) )]
setorder( dataset,  clase01,  azar )
neg_cant <-  nrow( dataset[ clase01==0 , ] )
pos_cant <-  nrow( dataset[ clase01==1 , ] )
dataset[  , particion:= 1 ]
dataset[  (round(neg_cant/2)+1): neg_cant ,  particion:= 2 ]
dataset[  (neg_cant+1):(neg_cant+1+ round(pos_cant/2)) ,  particion:= 2 ]
nrow( dataset[ particion==1, ] )
nrow( dataset[ particion==2, ] )
#-------------------------
#agrego un campo llamado nodo_arbol
#donde se podra rastear de donde proviene ese nodo
dataset[ , nodo_arbol := "1" ]
#en este momento hay un solo nodo, el "1", que es la raiz
#hago los conteos
dataset[ , list(  train_cant = sum(  particion==1 ),
test_cant  = sum(  particion==2 ),
train_pos  = sum(  particion==1 & clase01==1 ),
test_pos   = sum(  particion==2 & clase01==1 ),
train_neg  = sum(  particion==1 & clase01==0 ),
test_neg   = sum(  particion==2 & clase01==0 ),
train_gan  = sum(  ifelse( particion==1, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE),
test_gan   = sum(  ifelse( particion==2, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE)
)
, by="nodo_arbol" ]
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="1",]  )
#aqui cada alumno debe poner SUS PROPIAS SEMILLAS
ksemilla_azar1   <-  7799901
ksemilla_azar2   <-  56008937
dataset_mejorcorte  = function(pdataset)
{
#creo una variable azar que me va a ser util
#inicializo el generador de numeros aleatorios
set.seed( ksemilla_azar2 )
pdataset[ , azar   := runif(nrow(pdataset)) ]
#busco el mejor corte del dataset
metricas <- lapply( colnames( pdataset) , columna_mejorcorte,  pdataset )
metricas <- rbindlist( metricas )
metricas <- metricas[ order( -gan_total ) ]
#me quedo con el primero SIN ser clase01 ni clase_ternaria
m <-  metricas[ columna!="clase01" & columna!="clase_ternaria",  ][1]
return(  list(  "columna"   = m$columna,
"valor"     = m$valor ,
"gan_left"  = m$gan_left ,
"gan_right" = m$gan_right,
"gan_na"    = m$gan_na,
"gan_total" = m$gan_total
)
)
}
#-------------------------
#Divido el dataset en training 50% y testing 50%
# training es cuando particion=1,  testing cuando particion=2
set.seed(ksemilla_azar1 )
dataset[, azar :=  runif( nrow(dataset) )]
setorder( dataset,  clase01,  azar )
neg_cant <-  nrow( dataset[ clase01==0 , ] )
pos_cant <-  nrow( dataset[ clase01==1 , ] )
dataset[  , particion:= 1 ]
dataset[  (round(neg_cant/2)+1): neg_cant ,  particion:= 2 ]
dataset[  (neg_cant+1):(neg_cant+1+ round(pos_cant/2)) ,  particion:= 2 ]
nrow( dataset[ particion==1, ] )
nrow( dataset[ particion==2, ] )
#-------------------------
#agrego un campo llamado nodo_arbol
#donde se podra rastear de donde proviene ese nodo
dataset[ , nodo_arbol := "1" ]
#hago los conteos
dataset[ , list(  train_cant = sum(  particion==1 ),
test_cant  = sum(  particion==2 ),
train_pos  = sum(  particion==1 & clase01==1 ),
test_pos   = sum(  particion==2 & clase01==1 ),
train_neg  = sum(  particion==1 & clase01==0 ),
test_neg   = sum(  particion==2 & clase01==0 ),
train_gan  = sum(  ifelse( particion==1, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE),
test_gan   = sum(  ifelse( particion==2, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE)
)
, by="nodo_arbol" ]
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="1",]  )
dataset[ nodo_arbol=="1" & ttarjeta_visa<=0,  nodo_arbol:= "11" ]
dataset[ nodo_arbol=="1" & ttarjeta_visa>0 ,  nodo_arbol:= "12" ]
#termine el primer nivel del arbol, hago los conteos
dataset[ , list(  train_cant = sum(  particion==1 ),
test_cant  = sum(  particion==2 ),
train_pos  = sum(  particion==1 & clase01==1 ),
test_pos   = sum(  particion==2 & clase01==1 ),
train_neg  = sum(  particion==1 & clase01==0 ),
test_neg   = sum(  particion==2 & clase01==0 ),
train_gan  = sum(  ifelse( particion==1, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE),
test_gan   = 2*(sum(  ifelse( particion==2, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE))
)
, by="nodo_arbol" ]
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="11", ] )
dataset[ nodo_arbol=="11" & mautoservicio<=230.37,  nodo_arbol:= "111" ]
dataset[ nodo_arbol=="11" & mautoservicio> 230.37,  nodo_arbol:= "112" ]
#termine el segundo nivel del arbol, hago los conteos
dataset[ , list(  train_cant = sum(  particion==1 ),
test_cant  = sum(  particion==2 ),
train_pos  = sum(  particion==1 & clase01==1 ),
test_pos   = sum(  particion==2 & clase01==1 ),
train_neg  = sum(  particion==1 & clase01==0 ),
test_neg   = sum(  particion==2 & clase01==0 ),
train_gan  = sum(  ifelse( particion==1, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE),
test_gan   = 2*(sum(  ifelse( particion==2, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE))
)
, by="nodo_arbol" ]
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="12", ] )
dataset[ nodo_arbol=="12" & Visa_Finiciomora<=20190211,  nodo_arbol:= "121" ]
dataset[ nodo_arbol=="12" & ( Visa_Finiciomora>20190211 | is.na(Visa_Finiciomora) ) ,  nodo_arbol:= "122" ]
#termine el segundo nivel del arbol, hago los conteos
dataset[ , list(  train_cant = sum(  particion==1 ),
test_cant  = sum(  particion==2 ),
train_pos  = sum(  particion==1 & clase01==1 ),
test_pos   = sum(  particion==2 & clase01==1 ),
train_neg  = sum(  particion==1 & clase01==0 ),
test_neg   = sum(  particion==2 & clase01==0 ),
train_gan  = sum(  ifelse( particion==1, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE),
test_gan   = 2*(sum(  ifelse( particion==2, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE))
)
, by="nodo_arbol" ]
dataset[ , list(  train_cant = sum(  particion==1 ),
test_cant  = sum(  particion==2 ),
train_pos  = sum(  particion==1 & clase01==1 ),
test_pos   = sum(  particion==2 & clase01==1 ),
train_neg  = sum(  particion==1 & clase01==0 ),
test_neg   = sum(  particion==2 & clase01==0 ),
train_gan  = sum(  ifelse( particion==1, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE),
test_gan   = 2*(sum(  ifelse( particion==2, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE))
)
, by="nodo_arbol" ]
hacerConteo  = function()
{
dataset[ , list(  train_cant = sum(  particion==1 ),
test_cant  = sum(  particion==2 ),
train_pos  = sum(  particion==1 & clase01==1 ),
test_pos   = sum(  particion==2 & clase01==1 ),
train_neg  = sum(  particion==1 & clase01==0 ),
test_neg   = sum(  particion==2 & clase01==0 ),
train_gan  = sum(  ifelse( particion==1, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE),
test_gan   = 2*(sum(  ifelse( particion==2, ifelse( clase01, 19500, -500),  NA ), na.rm=TRUE))
)
, by="nodo_arbol" ]
}
hacerConteo()
hacerConteo()
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="111", ] )
dataset[ nodo_arbol=="111" & ccajeros_propio_transacciones<=1,  nodo_arbol:= "1111" ]
dataset[ nodo_arbol=="111" & ( ccajeros_propio_transacciones>1 | is.na(Visa_Finiciomora) ) ,  nodo_arbol:= "1112" ]
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="112", ] )
dataset[ nodo_arbol=="112" & mcuenta_corriente_Paquete<=-5031.85,  nodo_arbol:= "1121" ]
dataset[ nodo_arbol=="112" & ( mcuenta_corriente_Paquete>-5031.85 | is.na(Visa_Finiciomora) ) ,  nodo_arbol:= "1122" ]
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="121", ] )
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="121", ] )
dataset[ nodo_arbol=="121" & mcuenta_corriente_Paquete<=-1726.58,  nodo_arbol:= "1211" ]
dataset[ nodo_arbol=="121" & ( mcuenta_corriente_Paquete>-1726.58 | is.na(mcuenta_corriente_Paquete) ) ,  nodo_arbol:= "1212" ]
dataset[ nodo_arbol=="121" & mcuenta_corriente_Paquete<=-1726.58,  nodo_arbol:= "1211" ]
dataset[ nodo_arbol=="121" & ( mcuenta_corriente_Paquete>-1726.58 | is.na(mcuenta_corriente_Paquete) ) ,  nodo_arbol:= "1212" ]
dataset_mejorcorte( dataset[ particion==1 & nodo_arbol=="122", ] )
dataset[ nodo_arbol=="121" & tmovimientos_ultimos90dias<=3,  nodo_arbol:= "1211" ]
dataset[ nodo_arbol=="121" & ( tmovimientos_ultimos90dias>3 | is.na(tmovimientos_ultimos90dias) ) ,  nodo_arbol:= "1212" ]
hacerConteo()
dataset[ nodo_arbol=="111" & ccajeros_propio_transacciones<=1,  nodo_arbol:= "1111" ]
dataset[ nodo_arbol=="111" & ( ccajeros_propio_transacciones>1 | is.na(ccajeros_propio_transacciones) ) ,  nodo_arbol:= "1112" ]
dataset[ nodo_arbol=="112" & mcuenta_corriente_Paquete<=-5031.85,  nodo_arbol:= "1121" ]
dataset[ nodo_arbol=="112" & ( mcuenta_corriente_Paquete>-5031.85 | is.na(mcuenta_corriente_Paquete) ) ,  nodo_arbol:= "1122" ]
dataset[ nodo_arbol=="121" & mcuenta_corriente_Paquete<=-1726.58,  nodo_arbol:= "1211" ]
dataset[ nodo_arbol=="121" & ( mcuenta_corriente_Paquete>-1726.58 | is.na(mcuenta_corriente_Paquete) ) ,  nodo_arbol:= "1212" ]
dataset[ nodo_arbol=="121" & tmovimientos_ultimos90dias<=3,  nodo_arbol:= "1211" ]
dataset[ nodo_arbol=="121" & ( tmovimientos_ultimos90dias>3 | is.na(tmovimientos_ultimos90dias) ) ,  nodo_arbol:= "1212" ]
hacerConteo()
hacerConteo()
test <paste("Pega", "estas", 4, "palabras")
test <- paste("Pega", "estas", 4, "palabras")
test
test <- paste("Pega", "estas", 4, "palabras", sep"-")
test <- paste("Pega", "estas", 4, "palabras", sep = "-")
test
test <- paste0(1,2, 1,2)
test
sum(1:5)
elVector <- c(1,2,3,7)
elVector
elVector <- elVector +2
elVector
elVector <- elVector + 1:4
elVector
vectorNombres <- ("Nathaly", "Canela", "Simba")
vectorNombres <- c("Nathaly", "Canela", "Simba")
vectorNombres
vectorNombres[3]
vectorNombres[3]
deleteMe <- vectorNombre[2]
deleteMe <- vectorNombres[2]
deleteMe
rm(deleteMe)
vectorNombres <- c("Nathaly", "Canela", "Simba")
vectorNombres
deleteMe <- vectorNombres[2]
rm(deleteMe)
vectorNombres
INDICE  <- c(100,   100,   100,
101.8, 101.2, 100.73,
102.9, 102.4, 103.2)
FECHA  <-  c("Oct-16", "Oct-16", "Oct-16",
"Nov-16", "Nov-16", "Nov-16",
"Dic-16", "Dic-16", "Dic-16")
GRUPO  <-  c("Privado_Registrado","Público","Privado_No_Registrado",
"Privado_Registrado","Público","Privado_No_Registrado",
"Privado_Registrado","Público","Privado_No_Registrado")
Datos <- data.frame(INDICE, FECHA, GRUPO)
Datos
rm(INDICE)
rm(FECHA)
rm(GRUPO)
Datos
Datos$FECHA
Datos$FECHA[3]
Datos$FECHA
Datos$FECHA[3]
Datos[2][3]
Datos[2,3]
Datos$FECHA
Datos$FECHA[3]
Datos[2,3]
Datos[3,2]
Datos
Datos[2,3]
#Media de los datos de diciembre
Indices_Dic <- Datos$INDICE[Datos$FECHA=="Dic-16"]
Indices_Dic
mean(Indices_Dic)
superlista
superlista <- list(A,B,C,D,E,FECHA, DF = Datos, INDICE, GRUPO)
A <- factor("Soy un factor, con niveles fijos")
B <- A
C <- c(1,2,3,7)
superlista <- list(A,B,C,D,E,FECHA, DF = Datos, INDICE, GRUPO)
#Listas
A <- factor("Soy un factor, con niveles fijos")
B <- A
C <- c(1,2,3,7)
E <- C +3
superlista <- list(A,B,C,D,E,FECHA, DF = Datos, INDICE, GRUPO)
FECHA  <-  c("Oct-16", "Oct-16", "Oct-16",
"Nov-16", "Nov-16", "Nov-16",
"Dic-16", "Dic-16", "Dic-16")
superlista <- list(A,B,C,D,E,FECHA, DF = Datos, INDICE, GRUPO)
INDICE  <- c(100,   100,   100,
101.8, 101.2, 100.73,
102.9, 102.4, 103.2)
FECHA  <-  c("Oct-16", "Oct-16", "Oct-16",
"Nov-16", "Nov-16", "Nov-16",
"Dic-16", "Dic-16", "Dic-16")
GRUPO  <-  c("Privado_Registrado","Público","Privado_No_Registrado",
"Privado_Registrado","Público","Privado_No_Registrado",
"Privado_Registrado","Público","Privado_No_Registrado")
A <- factor("Soy un factor, con niveles fijos")
B <- A
C <- c(1,2,3,7)
E <- C +3
superlista <- list(A,B,C,D,E,FECHA, DF = Datos, INDICE, GRUPO)
superlista
superlista$DF$FECHA[2]
getwd()
rm(list=ls())
funcion_ejercicio_1 <- function(matriz) {
# Obtengo las dimensiones
print(dim(matriz))
# Chequeo si el primer elemento es par
primer_elem <- matriz[1,1]
if (primer_elem %% 2 == 0) {
print('El primer elemento es par')
}
else{print('El primer elemento no es par')}
}
A <- c(1,2,3)
B <- c(4,5,6)
C <- c(7,8,9)
matriz <- c(A,B,C)
matriz
arreglo <- c(A,B,C)
matriz <- matrix(data = matriz)
matriz
matriz <- matrix(data = c(A,B,C))
matriz
matriz <- matrix(data = c(A,B,C), nrow =3, ncol = 3)
matriz
funcion_ejercicio_1(matriz)
A <- c(8,2,3)
B <- c(4,5,6)
C <- c(7,8,9)
matriz <- matrix(data = c(A,B,C), nrow =3, ncol = 3)
funcion_ejercicio_1(matriz)
df <- state.x77
df
apply(X=df, MARGIN = 2, FUN = sum)
populationTotal <- apply(X=df, MARGIN = 2, FUN = sum)$population
populationTotal <- apply(X=df$population, MARGIN = 2, FUN = sum)
populationTotal <- apply(X=df, MARGIN = 2, FUN = sum)
populationTotal <- populationTotal$Population
populationTotal <- populationTotal[1]
populationTotal
populationTotal <- apply(X=df[1], MARGIN = 2, FUN = sum)
populationTotal <- apply(X=df[,1], MARGIN = 2, FUN = sum)
populationTotal <- apply(X=df[,1], MARGIN = 2, FUN = sum)
population <- df[,1]
population
populationTotal <- apply(X=population, MARGIN = 2, FUN = sum)
df <- state.x77
populationTotal <- apply(X=population, MARGIN = 2, FUN = sum)
populationTotal <- populationTotal[1]
populationTotal
df
lifeExpectationMean <- totalization[4]
lifeExpectationMean
lifeExpectationMean <- totalization[4]
totalization <- apply(X=population, MARGIN = 2, FUN = sum)
populationTotal <- totalization[1]
populationTotal
lifeExpectationMean <- totalization[4]
lifeExpectationMean
lifeExpectationMean <- totalization[4]
totalization <- apply(X=df, MARGIN = 2, FUN = sum)
populationTotal <- totalization[1]
populationTotal
#b) ¿Cuál es la media de la expectativa de vida?
#apply(X=df, MARGIN =2 , FUN=mean)
lifeExpectationMean <- totalization[4]
lifeExpectationMean
totalization
lifeExpectationMean
totalization <- apply(X=df, MARGIN = 2, FUN = mean)
lifeExpectationMean <- totalization[4]
lifeExpectationMean
totalization <- apply(X=df, MARGIN = 2, FUN = median(x))
totalization <- apply(X=df, MARGIN = 2, FUN = function(x) median(x)*usdToArs)
usdToArs <- 57.71
totalization <- apply(X=df, MARGIN = 2, FUN = function(x) median(x)*usdToArs)
totalization
incomeMean <- totalization[2]
incomeMean
df_indice <- df[,c(3, 5)]
df_indice
df
df_indice
ilit_murd <- apply(X=df_indice, MARGIN =1 , FUN=sum)
ilit_murd
ilit_murd[ilit_murd==max(ilit_murd)]
ilit_murd[ilit_murd==min(ilit_murd)]
ilit_murd[ilit_murd==max(ilit_murd)]
ilit_murd[ilit_murd==min(ilit_murd)]
rm(list=ls())
OBJETO <- 5+6
VEC0 <- c(1,3,4)
VEC1 <- VEC0*2
VEC2 <- VEC0^2
VEC3 <- VEC0-2
VEC4 <- c("NO","NO","SI")
VEC5 <- c("PAGO","PAGO","LIBRE")
VEC6 <- c("SAS","SPSS","R")
DFRAME <- data.frame(VEC0,VEC1,VEC2,VEC3,VEC4,VEC5,VEC6)
DFRAME
LALISTA <- list(OBJETO,VEC0,DFRAME)
LALISTA
for(i in VEC0){
print(i*3)
}
VEC0
for(i in unique(DFRAME$VEC6)){
A <- paste(DFRAME$VEC6[VEC6==i],DFRAME$VEC0[VEC6==i])
print(A)
}
DFRAME$VEC1 <- ifelse(DFRAME$VEC0>2,DFRAME$VEC0*2,DFRAME$VEC0)
DFRAME$VEC1
Hola_Mundo <- function(){
print("Hola mundo")
}
Hola_Mundo()
Sumatoria_enteros<- function(x){
y <- 1:x
sum(y)
}
Hoja_CBT_1 <- read.xlsx(file = "..CodigoProf//Fuentes/CANASTAS.xls",sheetName = "CBT")
Hoja_CBT_1 <- read.xlsx(file = "..CodigoProf/Fuentes/CANASTAS.xls",sheetName = "CBT")
getwd()
setwd("E:/UBA/2019-II/EEA/R Code")
getwd()
individual_t117 <- read.table("../Fuentes/usu_individual_t117.txt",
sep=";",
dec=",",
header = TRUE,
fill = TRUE)
individual_t117 <- read.table("../CodigoProf/Fuentes/usu_individual_t117.txt",
sep=";",
dec=",",
header = TRUE,
fill = TRUE)
saveRDS(individual_t117,"../CodigoProf/Fuentes/individual_t117.RDS")
rm(list=ls())
gc()
t0       <-  Sys.time()
individual_t117 <- read.table("../CodigoProf/Fuentes/usu_individual_t117.txt",
sep=";",
dec=",",
header = TRUE,
fill = TRUE)
t1       <-  Sys.time()
tcorridaTXT <-  as.numeric( t1 - t0, units = "secs")
# - Guardar la base como un archivo de extensión .RDS
saveRDS(individual_t117,"../CodigoProf/Fuentes/individual_t117.RDS")
# - Volver a levantar la base, pero como .RDS y asignarla conel nombre _BaseRDS_ ¿tarda más o menos?
t0       <-  Sys.time()
BaseRDS <- readRDS("../Fuentes/individual_t117.RDS")
t1       <-  Sys.time()
tcorridaRDS <-  as.numeric( t1 - t0, units = "secs")
tcorridaTXT
tcorridaRDS
rm(list=ls())
# - Levantar la base Individual del 1er trimestre de 2017, de la EPH
t0       <-  Sys.time()
individual_t117 <- read.table("../CodigoProf/Fuentes/usu_individual_t117.txt",
sep=";",
dec=",",
header = TRUE,
fill = TRUE)
t1       <-  Sys.time()
tcorridaTXT <-  as.numeric( t1 - t0, units = "secs")
# - Guardar la base como un archivo de extensión .RDS
saveRDS(individual_t117,"../CodigoProf/Fuentes/individual_t117.RDS")
# - Volver a levantar la base, pero como .RDS y asignarla conel nombre _BaseRDS_ ¿tarda más o menos?
t0       <-  Sys.time()
BaseRDS <- readRDS("../CodigoProf/Fuentes/individual_t117.RDS")
t1       <-  Sys.time()
tcorridaRDS <-  as.numeric( t1 - t0, units = "secs")
tcorridaTXT
tcorridaRDS
library(xlsx)
install.packages(xlsx)
install.packages('xlsx')
install.packages('xlsx', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('readxl', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(xlsx)
library(readxl)
install.packages('rJava', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(xlsx)
install.packages('Rtools', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(readxl)
Hoja_CBT_1 <- read.xlsx(file = "..CodigoProf/Fuentes/CANASTAS.xls",sheetName = "CBT")
Hoja_CBT_1 <- read.xlsx(file = "../CodigoProf/Fuentes/CANASTAS.xls",sheetName = "CBT")
class(Hoja_CBT_1)
Hoja_CBT_2 <- read_excel(path = "../CodigoProf/Fuentes/CANASTAS.xls",sheet = "CBT")
class(Hoja_CBT_2)
fuentes.dir <- "../CodigoProf/Fuentes/"
dir.exists(fuentes.dir)
Hoja_CBT <- read.xlsx(file = paste0(fuentes.dir,"CANASTAS.xls"),sheetName = "CBT",
encoding = "UTF-8")
Hoja_CBT
